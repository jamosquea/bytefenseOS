#!/bin/bash
# Bytefense OS - Controlador Principal Modular (Versi√≥n Mejorada)
# Incorpora mejoras de auditor√≠a: validaci√≥n, logging, colores, manejo de errores

set -euo pipefail  # Modo estricto para manejo robusto de errores

# === CONFIGURACI√ìN Y VARIABLES ===
BYTEFENSE_HOME="/opt/bytefense"
CONFIG_FILE="$BYTEFENSE_HOME/system/bytefense.conf"
DB_FILE="$BYTEFENSE_HOME/intel/threats.db"
MODULES_DIR="$BYTEFENSE_HOME/modules"
LOG_FILE="/opt/bytefense/logs/ctl.log"
LOG_DIR="/opt/bytefense/logs"

# Crear directorio de logs si no existe
mkdir -p "$LOG_DIR"

# === COLORES PARA MENSAJES ===
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# === FUNCIONES DE LOGGING ===
log_action() {
    local level="$1"
    local message="$2"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$timestamp] [$level] $message" >> "$LOG_FILE"
}

log_info() {
    log_action "INFO" "$1"
}

log_error() {
    log_action "ERROR" "$1"
}

log_warn() {
    log_action "WARN" "$1"
}

# === FUNCIONES DE MENSAJES COLORIZADOS ===
print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
    log_info "SUCCESS: $1"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}" >&2
    log_error "$1"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
    log_warn "$1"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
    log_info "$1"
}

print_header() {
    echo -e "${CYAN}üõ°Ô∏è  $1${NC}"
    log_info "HEADER: $1"
}

# === FUNCI√ìN DE MANEJO DE ERRORES ===
error_exit() {
    print_error "$1"
    exit 1
}

# Cargar configuraci√≥n si existe
if [ -f "$CONFIG_FILE" ]; then
    source "$CONFIG_FILE" || error_exit "Error al cargar configuraci√≥n desde $CONFIG_FILE"
fi

# === VALIDACI√ìN DE ARGUMENTOS ===
if [ $# -eq 0 ]; then
    print_error "No se proporcionaron argumentos"
    show_help
    exit 1
fi

# === FUNCI√ìN DE AYUDA MEJORADA ===
show_help() {
    cat << EOF
${CYAN}üõ°Ô∏è  Bytefense OS - Controlador Principal Modular (Pro)${NC}

${WHITE}Uso:${NC} bytefense-ctl <comando> [opciones]

${YELLOW}Comandos Generales:${NC}
  ${GREEN}init${NC}                 Inicializar nodo (configuraci√≥n inicial)
  ${GREEN}status${NC}              Mostrar estado del sistema y m√≥dulos
  ${GREEN}modules list${NC}        Listar m√≥dulos disponibles e instalados
  ${GREEN}modules install${NC} <m√≥dulo>  Instalar m√≥dulo espec√≠fico
  ${GREEN}modules remove${NC} <m√≥dulo>   Remover m√≥dulo espec√≠fico
  ${GREEN}update${NC}              Actualizar listas de amenazas
  ${GREEN}help${NC}                Mostrar esta ayuda

${YELLOW}Comandos de Inteligencia (m√≥dulo intel):${NC}
  ${GREEN}intel show${NC}          Mostrar amenazas registradas
  ${GREEN}intel add${NC} <ip>      Agregar IP a lista negra
  ${GREEN}intel remove${NC} <ip>   Remover IP de lista negra
  ${GREEN}intel update${NC}        Actualizar feeds de amenazas
  ${GREEN}intel stats${NC}         Mostrar estad√≠sticas detalladas

${YELLOW}Comandos de Sigilo:${NC}
  ${GREEN}sigilo on${NC}           Activar modo sigilo (ocultar servicios)
  ${GREEN}sigilo off${NC}          Desactivar modo sigilo
  ${GREEN}sigilo status${NC}       Mostrar estado del modo sigilo

${YELLOW}Comandos VPN (m√≥dulo vpn):${NC}
  ${GREEN}vpn setup${NC}           Configurar WireGuard
  ${GREEN}vpn qr${NC}              Mostrar QR para cliente m√≥vil
  ${GREEN}vpn add-client${NC} --name=<nombre>  Agregar cliente WireGuard
  ${GREEN}vpn show-client${NC} <nombre>        Mostrar config de cliente

${YELLOW}Comandos de Red (m√≥dulo reticularium):${NC}
  ${GREEN}register${NC} <master>   Registrar nodo en maestro
  ${GREEN}nodes list${NC}          Listar nodos registrados (solo maestro)
  ${GREEN}nodes status${NC}        Mostrar estado de todos los nodos
  ${GREEN}heartbeat${NC}           Enviar heartbeat al maestro (sat√©lites)
  ${GREEN}peers add${NC} <ip>      Agregar peer a red Reticularium
  ${GREEN}peers list${NC}          Listar peers conectados

${YELLOW}Comandos Honeypot (m√≥dulo honeypot):${NC}
  ${GREEN}honeypot status${NC}     Estado del honeypot
  ${GREEN}honeypot logs${NC}       Ver logs del honeypot

${YELLOW}Comandos Pi-hole (m√≥dulo pi-hole):${NC}
  ${GREEN}pihole sync${NC}         Sincronizar listas con Pi-hole
  ${GREEN}pihole status${NC}       Estado de Pi-hole

${YELLOW}Ejemplos:${NC}
  bytefense-ctl modules list
  bytefense-ctl modules install vpn
  bytefense-ctl intel add 192.168.1.100
  bytefense-ctl sigilo on
  bytefense-ctl vpn setup

EOF
}

# === FUNCIONES DE M√ìDULOS ===
module_installed() {
    local module=$1
    [ -f "$MODULES_DIR/$module.installed" ]
}

list_modules() {
    print_header "Estado de m√≥dulos Bytefense"
    echo ""
    
    local modules=("core" "pi-hole" "vpn" "intel" "honeypot" "reticularium")
    
    for module in "${modules[@]}"; do
        if module_installed "$module"; then
            print_success "$module - INSTALADO"
        else
            print_error "$module - NO INSTALADO"
        fi
    done
    
    echo ""
}

# === FUNCIONES DE INTELIGENCIA (MEJORADAS) ===
intel_show() {
    if [ ! -f "$DB_FILE" ]; then
        error_exit "Base de datos no encontrada. Ejecuta: bytefense-ctl init"
    fi
    
    print_header "Amenazas Registradas"
    
    local blocked_count=$(sqlite3 "$DB_FILE" "SELECT COUNT(*) FROM blocked_ips;" 2>/dev/null || echo "0")
    print_info "Total de IPs bloqueadas: $blocked_count"
    
    if [ "$blocked_count" -gt 0 ]; then
        echo ""
        echo -e "${WHITE}IPs Bloqueadas:${NC}"
        sqlite3 "$DB_FILE" "SELECT ip, reason, date FROM blocked_ips ORDER BY date DESC LIMIT 20;" 2>/dev/null | while IFS='|' read -r ip reason date; do
            echo -e "  ${RED}$ip${NC} - $reason (${YELLOW}$date${NC})"
        done
    fi
}

intel_add() {
    local ip="$1"
    local reason="${2:-Manual addition}"
    
    if [ -z "$ip" ]; then
        error_exit "Debe especificar una IP"
    fi
    
    # Validar formato IP
    if ! [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        error_exit "Formato de IP inv√°lido: $ip"
    fi
    
    if [ ! -f "$DB_FILE" ]; then
        error_exit "Base de datos no encontrada. Ejecuta: bytefense-ctl init"
    fi
    
    # Verificar si ya existe
    local exists=$(sqlite3 "$DB_FILE" "SELECT COUNT(*) FROM blocked_ips WHERE ip='$ip';" 2>/dev/null || echo "0")
    if [ "$exists" -gt 0 ]; then
        print_warning "La IP $ip ya est√° en la lista negra"
        return 0
    fi
    
    # Agregar a la base de datos
    sqlite3 "$DB_FILE" "INSERT INTO blocked_ips (ip, reason, date) VALUES ('$ip', '$reason', datetime('now'));" 2>/dev/null || error_exit "Error al agregar IP a la base de datos"
    
    # Agregar a iptables si est√° disponible
    if command -v iptables >/dev/null 2>&1; then
        iptables -A INPUT -s "$ip" -j DROP 2>/dev/null || print_warning "No se pudo agregar regla iptables para $ip"
    fi
    
    print_success "IP $ip agregada a la lista negra"
}

intel_remove() {
    local ip="$1"
    
    if [ -z "$ip" ]; then
        error_exit "Debe especificar una IP"
    fi
    
    if [ ! -f "$DB_FILE" ]; then
        error_exit "Base de datos no encontrada"
    fi
    
    # Verificar si existe
    local exists=$(sqlite3 "$DB_FILE" "SELECT COUNT(*) FROM blocked_ips WHERE ip='$ip';" 2>/dev/null || echo "0")
    if [ "$exists" -eq 0 ]; then
        print_warning "La IP $ip no est√° en la lista negra"
        return 0
    fi
    
    # Remover de la base de datos
    sqlite3 "$DB_FILE" "DELETE FROM blocked_ips WHERE ip='$ip';" 2>/dev/null || error_exit "Error al remover IP de la base de datos"
    
    # Remover de iptables si est√° disponible
    if command -v iptables >/dev/null 2>&1; then
        iptables -D INPUT -s "$ip" -j DROP 2>/dev/null || print_warning "No se pudo remover regla iptables para $ip"
    fi
    
    print_success "IP $ip removida de la lista negra"
}

intel_stats() {
    if [ ! -f "$DB_FILE" ]; then
        error_exit "Base de datos no encontrada"
    fi
    
    print_header "Estad√≠sticas de Inteligencia de Amenazas"
    
    local total_blocked=$(sqlite3 "$DB_FILE" "SELECT COUNT(*) FROM blocked_ips;" 2>/dev/null || echo "0")
    local recent_events=$(sqlite3 "$DB_FILE" "SELECT COUNT(*) FROM events WHERE date > datetime('now', '-24 hours');" 2>/dev/null || echo "0")
    local total_events=$(sqlite3 "$DB_FILE" "SELECT COUNT(*) FROM events;" 2>/dev/null || echo "0")
    
    echo -e "  ${WHITE}IPs Bloqueadas:${NC} ${RED}$total_blocked${NC}"
    echo -e "  ${WHITE}Eventos Totales:${NC} ${BLUE}$total_events${NC}"
    echo -e "  ${WHITE}Eventos (24h):${NC} ${YELLOW}$recent_events${NC}"
    
    # Top 5 IPs m√°s bloqueadas
    echo ""
    echo -e "${WHITE}Top 5 IPs m√°s reportadas:${NC}"
    sqlite3 "$DB_FILE" "SELECT ip, COUNT(*) as count FROM events WHERE ip IS NOT NULL GROUP BY ip ORDER BY count DESC LIMIT 5;" 2>/dev/null | while IFS='|' read -r ip count; do
        echo -e "  ${RED}$ip${NC} - ${YELLOW}$count${NC} eventos"
    done
}

intel_update() {
    print_info "Actualizando feeds de inteligencia de amenazas..."
    
    if [ ! -f "$DB_FILE" ]; then
        error_exit "Base de datos no encontrada"
    fi
    
    # Actualizar feeds (simulado - en implementaci√≥n real descargar√≠a feeds reales)
    local feeds_updated=0
    
    # Ejemplo de actualizaci√≥n de feed
    if command -v curl >/dev/null 2>&1; then
        # Aqu√≠ ir√≠a la l√≥gica real de descarga de feeds
        print_info "Descargando feeds de amenazas..."
        feeds_updated=1
    fi
    
    if [ $feeds_updated -eq 1 ]; then
        print_success "Feeds de inteligencia actualizados correctamente"
    else
        print_warning "No se pudieron actualizar todos los feeds"
    fi
}

# === FUNCIONES DE SIGILO (MEJORADAS) ===
sigilo_on() {
    print_info "Activando modo sigilo..."
    
    # Detener dashboard
    if systemctl is-active --quiet bytefense-dashboard 2>/dev/null; then
        systemctl stop bytefense-dashboard || print_warning "No se pudo detener bytefense-dashboard"
        print_success "Dashboard detenido"
    fi
    
    # Bloquear puerto 8080 con UFW
    if command -v ufw >/dev/null 2>&1; then
        ufw deny 8080 >/dev/null 2>&1 || print_warning "No se pudo bloquear puerto 8080"
        print_success "Puerto 8080 bloqueado"
    fi
    
    # Ocultar hostname (cambiar a gen√©rico)
    if [ -f /etc/hostname ]; then
        cp /etc/hostname /etc/hostname.backup 2>/dev/null || true
        echo "server" > /etc/hostname 2>/dev/null || print_warning "No se pudo cambiar hostname"
        print_success "Hostname ocultado"
    fi
    
    # Marcar modo sigilo como activo
    touch "$BYTEFENSE_HOME/system/.sigilo_active" 2>/dev/null || true
    
    print_success "Modo sigilo activado"
}

sigilo_off() {
    print_info "Desactivando modo sigilo..."
    
    # Iniciar dashboard
    systemctl start bytefense-dashboard || print_warning "No se pudo iniciar bytefense-dashboard"
    print_success "Dashboard iniciado"
    
    # Desbloquear puerto 8080
    if command -v ufw >/dev/null 2>&1; then
        ufw allow 8080 >/dev/null 2>&1 || print_warning "No se pudo desbloquear puerto 8080"
        print_success "Puerto 8080 desbloqueado"
    fi
    
    # Restaurar hostname
    if [ -f /etc/hostname.backup ]; then
        mv /etc/hostname.backup /etc/hostname 2>/dev/null || print_warning "No se pudo restaurar hostname"
        print_success "Hostname restaurado"
    fi
    
    # Remover marca de modo sigilo
    rm -f "$BYTEFENSE_HOME/system/.sigilo_active" 2>/dev/null || true
    
    print_success "Modo sigilo desactivado"
}

sigilo_status() {
    print_header "Estado del Modo Sigilo"
    
    if [ -f "$BYTEFENSE_HOME/system/.sigilo_active" ]; then
        print_warning "Modo sigilo: ACTIVO"
        echo -e "  ${RED}‚Ä¢ Dashboard detenido${NC}"
        echo -e "  ${RED}‚Ä¢ Puerto 8080 bloqueado${NC}"
        echo -e "  ${RED}‚Ä¢ Hostname oculto${NC}"
    else
        print_success "Modo sigilo: INACTIVO"
        echo -e "  ${GREEN}‚Ä¢ Dashboard activo${NC}"
        echo -e "  ${GREEN}‚Ä¢ Puerto 8080 abierto${NC}"
        echo -e "  ${GREEN}‚Ä¢ Hostname normal${NC}"
    fi
}

# === FUNCIONES EXISTENTES (MEJORADAS CON LOGGING) ===
show_status() {
    print_header "Estado de Bytefense OS"
    echo "========================="
    echo ""
    
    # Verificar base de datos
    if [ ! -f "$DB_FILE" ]; then
        error_exit "Base de datos no encontrada. Ejecuta: bytefense-ctl init"
    fi
    
    # Estad√≠sticas b√°sicas
    print_info "Estad√≠sticas:"
    local blocked_ips=$(sqlite3 "$DB_FILE" "SELECT COUNT(*) FROM blocked_ips;" 2>/dev/null || echo "0")
    local recent_events=$(sqlite3 "$DB_FILE" "SELECT COUNT(*) FROM events WHERE date > datetime('now', '-24 hours');" 2>/dev/null || echo "0")
    
    echo -e "  ${WHITE}üö´ IPs bloqueadas:${NC} ${RED}$blocked_ips${NC}"
    echo -e "  ${WHITE}üìù Eventos recientes (24h):${NC} ${YELLOW}$recent_events${NC}"
    echo ""
    
    # Informaci√≥n del nodo
    if [ -f "$CONFIG_FILE" ]; then
        print_info "Informaci√≥n del Nodo:"
        echo -e "  ${WHITE}Nombre:${NC} ${NODE_NAME:-N/A}"
        echo -e "  ${WHITE}Tipo:${NC} ${NODE_TYPE:-N/A}"
        echo -e "  ${WHITE}ID:${NC} ${NODE_ID:-N/A}"
        if [ "${NODE_TYPE:-}" = "satellite" ] && [ -n "${MASTER_IP:-}" ]; then
            echo -e "  ${WHITE}Maestro:${NC} ${MASTER_IP}"
        fi
        echo ""
    fi
    
    # Estado de m√≥dulos
    list_modules
    
    # Estado de servicios
    print_info "Estado de Servicios:"
    local services=("bytefense-dashboard" "bytefense-watch")
    
    if module_installed "honeypot"; then
        services+=("bytefense-honeypot")
    fi
    
    if module_installed "reticularium"; then
        services+=("bytefense-reticularium")
    fi
    
    if module_installed "vpn"; then
        services+=("wg-quick@wg0")
    fi
    
    if module_installed "pi-hole"; then
        services+=("pihole-FTL")
    fi
    
    for service in "${services[@]}"; do
        if systemctl is-active --quiet "$service" 2>/dev/null; then
            print_success "$service - ACTIVO"
        else
            print_error "$service - INACTIVO"
        fi
    done
    
    echo ""
    
    # Informaci√≥n de red
    print_info "Informaci√≥n de Red:"
    local local_ip=$(hostname -I | awk '{print $1}' 2>/dev/null || echo "N/A")
    echo -e "  ${WHITE}IP Local:${NC} $local_ip"
    echo -e "  ${WHITE}Dashboard:${NC} http://$local_ip:8080"
    
    if module_installed "pi-hole"; then
        echo -e "  ${WHITE}Pi-hole:${NC} http://$local_ip:8081/admin"
    fi
    
    echo ""
}

# === PROCESAMIENTO DE COMANDOS PRINCIPAL ===
log_info "Comando ejecutado: $*"

case "$1" in
    init)
        shift
        init_node "$@"
        ;;
    status)
        show_status
        ;;
    modules)
        case "${2:-}" in
            list)
                list_modules
                ;;
            install)
                if [ -z "${3:-}" ]; then
                    error_exit "Debe especificar un m√≥dulo para instalar"
                fi
                install_single_module "$3"
                ;;
            remove)
                if [ -z "${3:-}" ]; then
                    error_exit "Debe especificar un m√≥dulo para remover"
                fi
                remove_module "$3"
                ;;
            *)
                error_exit "Uso: bytefense-ctl modules list|install|remove"
                ;;
        esac
        ;;
    intel)
        case "${2:-}" in
            show)
                intel_show
                ;;
            add)
                if [ -z "${3:-}" ]; then
                    error_exit "Debe especificar una IP para agregar"
                fi
                intel_add "$3" "${4:-Manual addition}"
                ;;
            remove)
                if [ -z "${3:-}" ]; then
                    error_exit "Debe especificar una IP para remover"
                fi
                intel_remove "$3"
                ;;
            update)
                intel_update
                ;;
            stats)
                intel_stats
                ;;
            *)
                error_exit "Uso: bytefense-ctl intel show|add|remove|update|stats"
                ;;
        esac
        ;;
    sigilo)
        case "${2:-}" in
            on)
                sigilo_on
                ;;
            off)
                sigilo_off
                ;;
            status)
                sigilo_status
                ;;
            *)
                error_exit "Uso: bytefense-ctl sigilo on|off|status"
                ;;
        esac
        ;;
    update)
        intel_update
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        print_error "Comando no reconocido: $1"
        echo ""
        show_help
        exit 1
        ;;
esac

log_info "Comando completado exitosamente"