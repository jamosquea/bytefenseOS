#!/bin/bash
# Bytefense OS - Monitor de Seguridad Pasiva

BYTEFENSE_HOME="/opt/bytefense"
DB_FILE="$BYTEFENSE_HOME/intel/threats.db"
LOG_FILE="$BYTEFENSE_HOME/logs/watch.log"

# Crear directorio de logs si no existe
mkdir -p "$(dirname "$LOG_FILE")"

log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

block_ip() {
    local ip="$1"
    local reason="$2"
    
    # Validar formato de IP
    if ! [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        log "‚ö†Ô∏è  IP inv√°lida ignorada: $ip"
        return 1
    fi
    
    # Verificar si ya est√° bloqueada
    if ufw status | grep -q "$ip"; then
        log "‚ÑπÔ∏è  IP ya bloqueada: $ip"
        return 0
    fi
    
    # Agregar a UFW
    if ufw deny from "$ip" >/dev/null 2>&1; then
        # Registrar en base de datos
        sqlite3 "$DB_FILE" "INSERT OR IGNORE INTO blocked_ips (ip, reason, date) VALUES ('$ip', '$reason', datetime('now'));" 2>/dev/null
        log "üö´ IP bloqueada: $ip ($reason)"
    else
        log "‚ùå Error bloqueando IP: $ip"
    fi
}

monitor_auth_log() {
    log "üëÅÔ∏è  Iniciando monitoreo de /var/log/auth.log"
    
    tail -F /var/log/auth.log | while read line; do
        # Detectar intentos de SSH fallidos
        if echo "$line" | grep -q "Failed password"; then
            ip=$(echo "$line" | grep -oE '([0-9]{1,3}\.){3}[0-9]{1,3}')
            if [ ! -z "$ip" ]; then
                # Contar intentos fallidos en los √∫ltimos 5 minutos
                attempts=$(grep "Failed password" /var/log/auth.log | grep "$ip" | grep "$(date '+%b %d %H:%M' -d '5 minutes ago')" | wc -l)
                
                if [ "$attempts" -gt 3 ]; then
                    block_ip "$ip" "SSH Brute Force ($attempts attempts)"
                fi
            fi
        fi
        
        # Detectar escaneos de puertos
        if echo "$line" | grep -q "Invalid user"; then
            ip=$(echo "$line" | grep -oE '([0-9]{1,3}\.){3}[0-9]{1,3}')
            if [ ! -z "$ip" ]; then
                block_ip "$ip" "Invalid user attempt"
            fi
        fi
    done
}

# Funci√≥n principal
main() {
    log "üõ°Ô∏è  Bytefense Watch iniciado"
    
    # Crear base de datos si no existe
    if [ ! -f "$DB_FILE" ]; then
        sqlite3 "$DB_FILE" < "$BYTEFENSE_HOME/system/schema.sql"
    fi
    
    # Iniciar monitoreo
    monitor_auth_log
}

# Manejo de se√±ales
trap 'log "üõë Bytefense Watch detenido"; exit 0' SIGTERM SIGINT

main