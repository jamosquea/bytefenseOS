#!/bin/bash
# Bytefense OS - Monitor de Seguridad Mejorado con Validaciones

set -euo pipefail

BYTEFENSE_HOME="/opt/bytefense"
DB_FILE="$BYTEFENSE_HOME/intel/threats.db"
LOG_FILE="$BYTEFENSE_HOME/logs/watch.log"
CONFIG_FILE="$BYTEFENSE_HOME/system/watch.conf"
PID_FILE="/var/run/bytefense-watch.pid"

# Configuraci√≥n por defecto
MAX_FAILED_ATTEMPTS=5
TIME_WINDOW=300  # 5 minutos
BLOCK_DURATION=3600  # 1 hora
LOG_ROTATION_SIZE=10485760  # 10MB

# Crear directorio de logs si no existe
mkdir -p "$(dirname "$LOG_FILE")"

# Funci√≥n de logging con rotaci√≥n
log() {
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    local message="[$timestamp] $1"
    
    echo "$message" | tee -a "$LOG_FILE"
    
    # Rotaci√≥n de logs si es necesario
    if [[ -f "$LOG_FILE" ]] && [[ $(stat -f%z "$LOG_FILE" 2>/dev/null || stat -c%s "$LOG_FILE") -gt $LOG_ROTATION_SIZE ]]; then
        mv "$LOG_FILE" "${LOG_FILE}.old"
        touch "$LOG_FILE"
        log "üìã Log rotado por tama√±o"
    fi
}

# Validar formato de IP con regex m√°s estricto
validate_ip() {
    local ip="$1"
    
    # Regex para IPv4 v√°lida
    if [[ $ip =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}$ ]]; then
        # Verificar que cada octeto est√© en rango 0-255
        IFS='.' read -ra OCTETS <<< "$ip"
        for octet in "${OCTETS[@]}"; do
            if [[ $octet -gt 255 ]] || [[ $octet -lt 0 ]]; then
                return 1
            fi
        done
        
        # Excluir IPs privadas y especiales
        if [[ $ip =~ ^(10\.|172\.(1[6-9]|2[0-9]|3[01])\.|192\.168\.|127\.|0\.|255\.) ]]; then
            return 1
        fi
        
        return 0
    fi
    
    return 1
}

# Bloquear IP con validaciones mejoradas
block_ip() {
    local ip="$1"
    local reason="$2"
    local duration="${3:-$BLOCK_DURATION}"
    
    # Validar IP
    if ! validate_ip "$ip"; then
        log "‚ö†Ô∏è  IP inv√°lida o privada ignorada: $ip"
        return 1
    fi
    
    # Verificar si ya est√° bloqueada
    if ufw status numbered | grep -q "$ip"; then
        log "‚ÑπÔ∏è  IP ya bloqueada: $ip"
        return 0
    fi
    
    # Verificar whitelist
    if [[ -f "$BYTEFENSE_HOME/system/whitelist.txt" ]] && grep -q "^$ip$" "$BYTEFENSE_HOME/system/whitelist.txt"; then
        log "‚úÖ IP en whitelist, no bloqueada: $ip"
        return 0
    fi
    
    # Agregar a UFW con timeout
    if timeout 10 ufw deny from "$ip" >/dev/null 2>&1; then
        # Registrar en base de datos con informaci√≥n adicional
        local country=$(timeout 5 curl -s "http://ip-api.com/json/$ip" | jq -r '.country // "Unknown"' 2>/dev/null || echo "Unknown")
        local asn=$(timeout 5 curl -s "http://ip-api.com/json/$ip" | jq -r '.as // "Unknown"' 2>/dev/null || echo "Unknown")
        
        sqlite3 "$DB_FILE" "INSERT OR IGNORE INTO blocked_ips (ip, reason, date, country, asn) VALUES ('$ip', '$reason', datetime('now'), '$country', '$asn');" 2>/dev/null || true
        
        log "üö´ IP bloqueada: $ip ($reason) - Pa√≠s: $country"
        
        # Programar desbloqueo autom√°tico si se especifica duraci√≥n
        if [[ $duration -gt 0 ]]; then
            echo "ufw delete deny from $ip" | at "now + $duration seconds" 2>/dev/null || true
            log "‚è∞ Desbloqueo programado para $ip en $duration segundos"
        fi
        
        return 0
    else
        log "‚ùå Error bloqueando IP: $ip"
        return 1
    fi
}

# Monitor mejorado de auth.log
monitor_auth_log() {
    log "üëÅÔ∏è  Iniciando monitoreo mejorado de /var/log/auth.log"
    
    # Verificar que el archivo existe
    if [[ ! -f /var/log/auth.log ]]; then
        log "‚ùå Archivo /var/log/auth.log no encontrado"
        return 1
    fi
    
    # Usar inotify para monitoreo eficiente
    tail -F /var/log/auth.log | while IFS= read -r line; do
        # Detectar intentos de SSH fallidos
        if echo "$line" | grep -q "Failed password\|Invalid user\|Connection closed by authenticating user"; then
            local ip=$(echo "$line" | grep -oE '([0-9]{1,3}\.){3}[0-9]{1,3}' | head -1)
            
            if [[ -n "$ip" ]] && validate_ip "$ip"; then
                # Contar intentos fallidos recientes
                local recent_time=$(date -d "$TIME_WINDOW seconds ago" '+%b %d %H:%M')
                local attempts=$(grep "$ip" /var/log/auth.log | 
                               grep -E "Failed password|Invalid user" | 
                               awk -v since="$recent_time" '$0 >= since' | 
                               wc -l)
                
                if [[ $attempts -ge $MAX_FAILED_ATTEMPTS ]]; then
                    block_ip "$ip" "SSH Brute Force ($attempts attempts in ${TIME_WINDOW}s)"
                fi
            fi
        fi
        
        # Detectar otros patrones sospechosos
        if echo "$line" | grep -qE "POSSIBLE BREAK-IN ATTEMPT|repeated login failures"; then
            local ip=$(echo "$line" | grep -oE '([0-9]{1,3}\.){3}[0-9]{1,3}' | head -1)
            if [[ -n "$ip" ]] && validate_ip "$ip"; then
                block_ip "$ip" "Suspicious activity detected"
            fi
        fi
    done
}

# Funci√≥n de limpieza
cleanup() {
    log "üõë Bytefense Watch detenido"
    rm -f "$PID_FILE"
    exit 0
}

# Funci√≥n principal
main() {
    # Verificar si ya est√° ejecut√°ndose
    if [[ -f "$PID_FILE" ]] && kill -0 "$(cat "$PID_FILE")" 2>/dev/null; then
        log "‚ùå Bytefense Watch ya est√° ejecut√°ndose (PID: $(cat "$PID_FILE"))"
        exit 1
    fi
    
    # Guardar PID
    echo $$ > "$PID_FILE"
    
    log "üõ°Ô∏è  Bytefense Watch iniciado (PID: $$)"
    
    # Crear base de datos si no existe
    if [[ ! -f "$DB_FILE" ]]; then
        sqlite3 "$DB_FILE" < "$BYTEFENSE_HOME/system/schema.sql" || 
            log "‚ö†Ô∏è  Error creando base de datos"
    fi
    
    # Cargar configuraci√≥n personalizada
    if [[ -f "$CONFIG_FILE" ]]; then
        source "$CONFIG_FILE"
        log "üìã Configuraci√≥n cargada desde $CONFIG_FILE"
    fi
    
    # Iniciar monitoreo
    monitor_auth_log
}

# Manejo de se√±ales
trap cleanup SIGTERM SIGINT

# Ejecutar
main "$@"